var app = {
    id: "#app",
    class: "app",
    isMobile:
      /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(
        navigator.userAgent
      ) || window.innerWidth < 767,
    darkMode: {
      attr: "data-bs-theme",
      value: "dark",
      eventName: "theme-reload",
    },
    themePanel: {
      class: "theme-panel",
      toggleAttr: 'data-toggle="theme-panel-expand"',
      cookieName: "theme-panel-expand",
      activeClass: "active",
      themeListCLass: "theme-list",
      themeListItemCLass: "theme-list-item",
      theme: {
        toggleAttr: 'data-toggle="theme-selector"',
        cookieName: "app-theme",
        activeClass: "active",
        classAttr: "data-theme-class",
      },
      themeDarkMode: {
        class: "dark-mode",
        toggleAttr: 'name="app-theme-dark-mode"',
        cookieName: "app-theme-dark-mode",
      },
    },
    font: {},
    color: {},
    variablePrefix: "bs-",
    variableFontList: [
      "body-font-family",
      "body-font-size",
      "body-font-weight",
      "body-line-height",
    ],
    variableColorList: [
      "theme",
      "theme-rgb",
      "theme-color",
      "theme-color-rgb",
      "component-color",
      "component-color-rgb",
      "component-bg",
      "component-bg-rgb",
      "component-secondary-bg",
      "component-bg-rgb",
      "component-tertiary-bg",
      "component-tertiary-bg-rgb",
      "default",
      "default-rgb",
      "primary",
      "primary-rgb",
      "primary-bg-subtle",
      "primary-text",
      "primary-border-subtle",
      "secondary",
      "secondary-rgb",
      "secondary-bg-subtle",
      "secondary-text",
      "secondary-border-subtle",
      "success",
      "success-rgb",
      "success-bg-subtle",
      "success-text",
      "success-border-subtle",
      "warning",
      "warning-rgb",
      "warning-bg-subtle",
      "warning-text",
      "warning-border-subtle",
      "info",
      "info-rgb",
      "info-bg-subtle",
      "info-text",
      "info-border-subtle",
      "danger",
      "danger-rgb",
      "danger-bg-subtle",
      "danger-text",
      "danger-border-subtle",
      "light",
      "light-rgb",
      "light-bg-subtle",
      "light-text",
      "light-border-subtle",
      "dark",
      "dark-rgb",
      "dark-bg-subtle",
      "dark-text",
      "dark-border-subtle",
      "black",
      "black-rgb",
      "blue",
      "blue-rgb",
      "inverse",
      "inverse-rgb",
      "white",
      "white-rgb",
      "red",
      "red-rgb",
      "teal",
      "teal-rgb",
      "indigo",
      "indigo-rgb",
      "orange",
      "orange-rgb",
      "purple",
      "purple-rgb",
      "yellow",
      "yellow-rgb",
      "green",
      "green-rgb",
      "pink",
      "pink-rgb",
      "cyan",
      "cyan-rgb",
      "gray",
      "gray-rgb",
      "lime",
      "lime-rgb",
      "gray-100",
      "gray-200",
      "gray-300",
      "gray-400",
      "gray-500",
      "gray-600",
      "gray-700",
      "gray-800",
      "gray-900",
      "gray-100-rgb",
      "gray-200-rgb",
      "gray-300-rgb",
      "gray-400-rgb",
      "gray-500-rgb",
      "gray-600-rgb",
      "gray-700-rgb",
      "gray-800-rgb",
      "gray-900-rgb",
      "muted",
      "muted-rgb",
      "emphasis-color",
      "emphasis-color-rgb",
      "heading-color",
      "body-bg",
      "body-bg-rgb",
      "body-color",
      "body-color-rgb",
      "secondary-color",
      "secondary-color-rgb",
      "secondary-bg",
      "secondary-bg-rgb",
      "tertiary-color",
      "tertiary-color-rgb",
      "tertiary-bg",
      "tertiary-bg-rgb",
      "link-color",
      "link-color-rgb",
      "link-hover-color",
      "link-hover-color-rgb",
      "border-color",
      "border-color-translucent",
    ],
    breakpoints: {
      xs: 0,
      sm: 576,
      md: 768,
      lg: 992,
      xl: 1200,
      xxl: 1400,
      xxxl: 1800,
    },
  },
  slideUp = function (e, t = app.animation.speed) {
    e.classList.contains("transitioning") ||
      (e.classList.add("transitioning"),
      (e.style.transitionProperty = "height, margin, padding"),
      (e.style.transitionDuration = t + "ms"),
      (e.style.boxSizing = "border-box"),
      (e.style.height = e.offsetHeight + "px"),
      e.offsetHeight,
      (e.style.overflow = "hidden"),
      (e.style.height = 0),
      (e.style.paddingTop = 0),
      (e.style.paddingBottom = 0),
      (e.style.marginTop = 0),
      (e.style.marginBottom = 0),
      window.setTimeout(() => {
        (e.style.display = "none"),
          e.style.removeProperty("height"),
          e.style.removeProperty("padding-top"),
          e.style.removeProperty("padding-bottom"),
          e.style.removeProperty("margin-top"),
          e.style.removeProperty("margin-bottom"),
          e.style.removeProperty("overflow"),
          e.style.removeProperty("transition-duration"),
          e.style.removeProperty("transition-property"),
          e.classList.remove("transitioning");
      }, t));
  },
  slideDown = function (e, t = app.animation.speed) {
    if (!e.classList.contains("transitioning")) {
      e.classList.add("transitioning"), e.style.removeProperty("display");
      let a = window.getComputedStyle(e).display;
      "none" === a && (a = "block"), (e.style.display = a);
      let o = e.offsetHeight;
      (e.style.overflow = "hidden"),
        (e.style.height = 0),
        (e.style.paddingTop = 0),
        (e.style.paddingBottom = 0),
        (e.style.marginTop = 0),
        (e.style.marginBottom = 0),
        e.offsetHeight,
        (e.style.boxSizing = "border-box"),
        (e.style.transitionProperty = "height, margin, padding"),
        (e.style.transitionDuration = t + "ms"),
        (e.style.height = o + "px"),
        e.style.removeProperty("padding-top"),
        e.style.removeProperty("padding-bottom"),
        e.style.removeProperty("margin-top"),
        e.style.removeProperty("margin-bottom"),
        window.setTimeout(() => {
          e.style.removeProperty("height"),
            e.style.removeProperty("overflow"),
            e.style.removeProperty("transition-duration"),
            e.style.removeProperty("transition-property"),
            e.classList.remove("transitioning");
        }, t);
    }
  },
  slideToggle = function (e, t = app.animation.speed) {
    return "none" === window.getComputedStyle(e).display
      ? slideDown(e, t)
      : slideUp(e, t);
  },
  setCookie = function (e, t) {
    var a = new Date(),
      o = a.getTime() + 36e6;
    a.setTime(o),
      (document.cookie =
        e + "=" + t + ";expires=" + a.toUTCString() + ";path=/");
  },
  getCookie = function (e) {
    let t = e + "=",
      a = decodeURIComponent(document.cookie).split(";");
    for (let e = 0; e < a.length; e++) {
      let o = a[e];
      for (; " " == o.charAt(0); ) o = o.substring(1);
      if (0 == o.indexOf(t)) return o.substring(t.length, o.length);
    }
    return "";
  },
  handleHomeContentHeight = function () {
    $("#home").height($(window).height()),
      $(window).on("resize", function () {
        $("#home").height($(window).height());
      });
  },
  handleHeaderNavigationState = function () {
    $(window).on("scroll load", function () {
      "disabled" != $("#header").attr("data-state-change") &&
        ($(window).scrollTop() > $("#header").height()
          ? $("#header").addClass("navbar-sm")
          : $("#header").removeClass("navbar-sm"));
    });
  },
  handleAddCommasToNumber = function (e) {
    return e.toString().replace(/(\d)(?=(\d\d\d)+(?!\d))/g, "$1,");
  },
  handlePageContainerShow = function () {
    $("#page-container").addClass("show");
  },
  handlePageScrollContentAnimation = function () {
    $('[data-scrollview="true"]').each(function () {
      var e = $(this);
      scrollMonitor.create(e, 60).enterViewport(function () {
        $(e)
          .find("[data-animation=true]")
          .each(function () {
            var e = $(this).attr("data-animation-type"),
              t = $(this);
            if (!$(t).hasClass("contentAnimated"))
              if ("number" == e) {
                var a = parseInt($(t).attr("data-final-number"));
                $({ animateNumber: 0 }).animate(
                  { animateNumber: a },
                  {
                    duration: 1e3,
                    easing: "swing",
                    step: function () {
                      var e = handleAddCommasToNumber(
                        Math.ceil(this.animateNumber)
                      );
                      $(t).text(e).addClass("contentAnimated");
                    },
                  }
                );
              } else
                $(this).addClass(e + " contentAnimated"),
                  setTimeout(function () {
                    $(t).addClass("finishAnimated");
                  }, 1500);
          });
      });
    });
  },
  handleHeaderScrollToAction = function () {
    $(document).on("click", "[data-click=scroll-to-target]", function (e) {
      e.preventDefault(), e.stopPropagation();
      var t =
          !(t = $(this).attr("data-scroll-target")
            ? $(this).attr("data-scroll-target")
            : "") && $(this).attr("href")
            ? $(this).attr("href")
            : t,
        a = $(this).closest(".header").length;
      $("html, body").animate({ scrollTop: $(t).offset().top - 50 }, 500);
      var o = $(this).closest(".nav-item");
      $(o).hasClass("dropdown") &&
        ($(o).hasClass("open")
          ? $(o).removeClass("open")
          : $(o).addClass("open")),
        $(window).width() < 769 &&
          !$(o).hasClass("dropdown") &&
          a &&
          $('#header [data-toggle="collapse"]').trigger("click");
    }),
      $(document).click(function (e) {
        !e.isPropagationStopped() &&
          $(window).width() > 768 &&
          $(".dropdown.open").removeClass("open");
      });
  },
  handleTooltipActivation = function () {
    0 !== $("[data-bs-toggle=tooltip]").length &&
      $("[data-bs-toggle=tooltip]").tooltip();
  },
  handleThemePanel = function () {
    var e, t;
    ((t = document.querySelector("[" + app.themePanel.toggleAttr + "]")) &&
      (t.onclick = function (e) {
        e.preventDefault();
        var t = document.querySelector("." + app.themePanel.class),
          a = !t.classList.contains(app.themePanel.activeClass);
        t.classList.toggle(app.themePanel.activeClass),
          setCookie(app.themePanel.cookieName, a);
      }),
    (e = [].slice.call(
      document.querySelectorAll(
        "." +
          app.themePanel.class +
          " [" +
          app.themePanel.theme.toggleAttr +
          "]"
      )
    )) &&
      e.map(function (e) {
        e.onclick = function () {
          for (
            var t = this.getAttribute(app.themePanel.theme.classAttr), a = 0;
            a < document.body.classList.length;
            a++
          ) {
            var o = document.body.classList[a];
            o.search("theme-") > -1 && document.body.classList.remove(o);
          }
          t && document.body.classList.add(t),
            [].slice
              .call(
                document.querySelectorAll(
                  "." +
                    app.themePanel.class +
                    " [" +
                    app.themePanel.theme.toggleAttr +
                    "]"
                )
              )
              .map(function (t) {
                t != e
                  ? t
                      .closest("." + app.themePanel.themeListItemCLass)
                      .classList.remove(app.themePanel.theme.activeClass)
                  : t
                      .closest("." + app.themePanel.themeListItemCLass)
                      .classList.add(app.themePanel.theme.activeClass);
              }),
            setCookie(app.themePanel.theme.cookieName, t);
        };
      }),
    (e = [].slice.call(
      document.querySelectorAll(
        "." +
          app.themePanel.class +
          " [" +
          app.themePanel.themeDarkMode.toggleAttr +
          "]"
      )
    )).map(function (e) {
      e.onchange = function () {
        this.checked
          ? document
              .querySelector("html")
              .setAttribute(app.darkMode.attr, app.darkMode.value)
          : document.querySelector("html").removeAttribute(app.darkMode.attr),
          App.initVariable(),
          setCookie(
            app.themePanel.themeDarkMode.cookieName,
            this.checked ? app.themePanel.themeDarkMode.class : ""
          ),
          document.dispatchEvent(new CustomEvent(app.darkMode.eventName));
      };
    }),
    getCookie(app.themePanel.cookieName) &&
      "true" == getCookie(app.themePanel.cookieName)) &&
      (t = document.querySelector(
        "." + app.themePanel.class + " [" + app.themePanel.toggleAttr + "]"
      )) &&
      t.click();
    getCookie(app.themePanel.theme.cookieName) &&
      (t = document.querySelector(
        "." +
          app.themePanel.class +
          " [" +
          app.themePanel.theme.toggleAttr +
          "][" +
          app.themePanel.theme.classAttr +
          '="' +
          getCookie(app.themePanel.theme.cookieName) +
          '"]'
      )) &&
      t.click();
    getCookie(app.themePanel.themeDarkMode.cookieName) &&
      (t = document.querySelector(
        "." +
          app.themePanel.class +
          " [" +
          app.themePanel.themeDarkMode.toggleAttr +
          "]"
      )) &&
      ((t.checked = !0), t.onchange());
  },
  handleParoller = function () {
    void 0 !== $.fn.paroller &&
      0 !== $('[data-paroller="true"]').length &&
      $('[data-paroller="true"]').paroller();
  },
  handleCssVariable = function () {
    var e = getComputedStyle(document.body);
    if (app.variableFontList && app.variablePrefix)
      for (var t = 0; t < app.variableFontList.length; t++)
        app.font[
          app.variableFontList[t].replace(/-([a-z|0-9])/g, (e, t) =>
            t.toUpperCase()
          )
        ] = e
          .getPropertyValue("--" + app.variablePrefix + app.variableFontList[t])
          .trim();
    if (app.variableColorList && app.variablePrefix)
      for (t = 0; t < app.variableColorList.length; t++)
        app.color[
          app.variableColorList[t].replace(/-([a-z|0-9])/g, (e, t) =>
            t.toUpperCase()
          )
        ] = e
          .getPropertyValue(
            "--" + app.variablePrefix + app.variableColorList[t]
          )
          .trim();
  },
  App = (function () {
    "use strict";
    return {
      init: function () {
        handleHomeContentHeight(),
          handleHeaderNavigationState(),
          handlePageContainerShow(),
          handlePageScrollContentAnimation(),
          handleHeaderScrollToAction(),
          handleTooltipActivation(),
          handleThemePanel(),
          handleParoller(),
          this.initVariable();
      },
      initVariable: function () {},
    };
  })();
$(document).ready(function () {
  App.init();
});



// =========================== tampilan history timeline

jQuery(document).ready(function($){
	var timelines = $('.cd-horizontal-timeline'),
		eventsMinDistance = 60;

	(timelines.length > 0) && initTimeline(timelines);

	function initTimeline(timelines) {
		timelines.each(function(){
			var timeline = $(this),
				timelineComponents = {};
			//cache timeline components 
			timelineComponents['timelineWrapper'] = timeline.find('.events-wrapper');
			timelineComponents['eventsWrapper'] = timelineComponents['timelineWrapper'].children('.events');
			timelineComponents['fillingLine'] = timelineComponents['eventsWrapper'].children('.filling-line');
			timelineComponents['timelineEvents'] = timelineComponents['eventsWrapper'].find('a');
			timelineComponents['timelineDates'] = parseDate(timelineComponents['timelineEvents']);
			timelineComponents['eventsMinLapse'] = minLapse(timelineComponents['timelineDates']);
			timelineComponents['timelineNavigation'] = timeline.find('.cd-timeline-navigation');
			timelineComponents['eventsContent'] = timeline.children('.events-content');

			//assign a left postion to the single events along the timeline
			setDatePosition(timelineComponents, eventsMinDistance);
			//assign a width to the timeline
			var timelineTotWidth = setTimelineWidth(timelineComponents, eventsMinDistance);
			//the timeline has been initialize - show it
			timeline.addClass('loaded');

			//detect click on the next arrow
			timelineComponents['timelineNavigation'].on('click', '.next', function(event){
				event.preventDefault();
				updateSlide(timelineComponents, timelineTotWidth, 'next');
			});
			//detect click on the prev arrow
			timelineComponents['timelineNavigation'].on('click', '.prev', function(event){
				event.preventDefault();
				updateSlide(timelineComponents, timelineTotWidth, 'prev');
			});
			//detect click on the a single event - show new event content
			timelineComponents['eventsWrapper'].on('click', 'a', function(event){
				event.preventDefault();
				timelineComponents['timelineEvents'].removeClass('selected');
				$(this).addClass('selected');
				updateOlderEvents($(this));
				updateFilling($(this), timelineComponents['fillingLine'], timelineTotWidth);
				updateVisibleContent($(this), timelineComponents['eventsContent']);
			});

			//on swipe, show next/prev event content
			timelineComponents['eventsContent'].on('swipeleft', function(){
				var mq = checkMQ();
				( mq == 'mobile' ) && showNewContent(timelineComponents, timelineTotWidth, 'next');
			});
			timelineComponents['eventsContent'].on('swiperight', function(){
				var mq = checkMQ();
				( mq == 'mobile' ) && showNewContent(timelineComponents, timelineTotWidth, 'prev');
			});

			//keyboard navigation
			$(document).keyup(function(event){
				if(event.which=='37' && elementInViewport(timeline.get(0)) ) {
					showNewContent(timelineComponents, timelineTotWidth, 'prev');
				} else if( event.which=='39' && elementInViewport(timeline.get(0))) {
					showNewContent(timelineComponents, timelineTotWidth, 'next');
				}
			});
		});
	}

	function updateSlide(timelineComponents, timelineTotWidth, string) {
		//retrieve translateX value of timelineComponents['eventsWrapper']
		var translateValue = getTranslateValue(timelineComponents['eventsWrapper']),
			wrapperWidth = Number(timelineComponents['timelineWrapper'].css('width').replace('px', ''));
		//translate the timeline to the left('next')/right('prev') 
		(string == 'next') 
			? translateTimeline(timelineComponents, translateValue - wrapperWidth + eventsMinDistance, wrapperWidth - timelineTotWidth)
			: translateTimeline(timelineComponents, translateValue + wrapperWidth - eventsMinDistance);
	}

	function showNewContent(timelineComponents, timelineTotWidth, string) {
		//go from one event to the next/previous one
		var visibleContent =  timelineComponents['eventsContent'].find('.selected'),
			newContent = ( string == 'next' ) ? visibleContent.next() : visibleContent.prev();

		if ( newContent.length > 0 ) { //if there's a next/prev event - show it
			var selectedDate = timelineComponents['eventsWrapper'].find('.selected'),
				newEvent = ( string == 'next' ) ? selectedDate.parent('li').next('li').children('a') : selectedDate.parent('li').prev('li').children('a');
			
			updateFilling(newEvent, timelineComponents['fillingLine'], timelineTotWidth);
			updateVisibleContent(newEvent, timelineComponents['eventsContent']);
			newEvent.addClass('selected');
			selectedDate.removeClass('selected');
			updateOlderEvents(newEvent);
			updateTimelinePosition(string, newEvent, timelineComponents, timelineTotWidth);
		}
	}

	function updateTimelinePosition(string, event, timelineComponents, timelineTotWidth) {
		//translate timeline to the left/right according to the position of the selected event
		var eventStyle = window.getComputedStyle(event.get(0), null),
			eventLeft = Number(eventStyle.getPropertyValue("left").replace('px', '')),
			timelineWidth = Number(timelineComponents['timelineWrapper'].css('width').replace('px', '')),
			timelineTotWidth = Number(timelineComponents['eventsWrapper'].css('width').replace('px', ''));
		var timelineTranslate = getTranslateValue(timelineComponents['eventsWrapper']);

        if( (string == 'next' && eventLeft > timelineWidth - timelineTranslate) || (string == 'prev' && eventLeft < - timelineTranslate) ) {
        	translateTimeline(timelineComponents, - eventLeft + timelineWidth/2, timelineWidth - timelineTotWidth);
        }
	}

	function translateTimeline(timelineComponents, value, totWidth) {
		var eventsWrapper = timelineComponents['eventsWrapper'].get(0);
		value = (value > 0) ? 0 : value; //only negative translate value
		value = ( !(typeof totWidth === 'undefined') &&  value < totWidth ) ? totWidth : value; //do not translate more than timeline width
		setTransformValue(eventsWrapper, 'translateX', value+'px');
		//update navigation arrows visibility
		(value == 0 ) ? timelineComponents['timelineNavigation'].find('.prev').addClass('inactive') : timelineComponents['timelineNavigation'].find('.prev').removeClass('inactive');
		(value == totWidth ) ? timelineComponents['timelineNavigation'].find('.next').addClass('inactive') : timelineComponents['timelineNavigation'].find('.next').removeClass('inactive');
	}

	function updateFilling(selectedEvent, filling, totWidth) {
		//change .filling-line length according to the selected event
		var eventStyle = window.getComputedStyle(selectedEvent.get(0), null),
			eventLeft = eventStyle.getPropertyValue("left"),
			eventWidth = eventStyle.getPropertyValue("width");
		eventLeft = Number(eventLeft.replace('px', '')) + Number(eventWidth.replace('px', ''))/2;
		var scaleValue = eventLeft/totWidth;
		setTransformValue(filling.get(0), 'scaleX', scaleValue);
	}

	function setDatePosition(timelineComponents, min) {
		for (i = 0; i < timelineComponents['timelineDates'].length; i++) { 
		    var distance = daydiff(timelineComponents['timelineDates'][0], timelineComponents['timelineDates'][i]),
		    	distanceNorm = Math.round(distance/timelineComponents['eventsMinLapse']) + 2;
		    timelineComponents['timelineEvents'].eq(i).css('left', distanceNorm*min+'px');
		}
	}

	function setTimelineWidth(timelineComponents, width) {
		var timeSpan = daydiff(timelineComponents['timelineDates'][0], timelineComponents['timelineDates'][timelineComponents['timelineDates'].length-1]),
			timeSpanNorm = timeSpan/timelineComponents['eventsMinLapse'],
			timeSpanNorm = Math.round(timeSpanNorm) + 4,
			totalWidth = timeSpanNorm*width;
		timelineComponents['eventsWrapper'].css('width', totalWidth+'px');
		updateFilling(timelineComponents['timelineEvents'].eq(0), timelineComponents['fillingLine'], totalWidth);
	
		return totalWidth;
	}

	function updateVisibleContent(event, eventsContent) {
		var eventDate = event.data('date'),
			visibleContent = eventsContent.find('.selected'),
			selectedContent = eventsContent.find('[data-date="'+ eventDate +'"]'),
			selectedContentHeight = selectedContent.height();

		if (selectedContent.index() > visibleContent.index()) {
			var classEnetering = 'selected enter-right',
				classLeaving = 'leave-left';
		} else {
			var classEnetering = 'selected enter-left',
				classLeaving = 'leave-right';
		}

		selectedContent.attr('class', classEnetering);
		visibleContent.attr('class', classLeaving).one('webkitAnimationEnd oanimationend msAnimationEnd animationend', function(){
			visibleContent.removeClass('leave-right leave-left');
			selectedContent.removeClass('enter-left enter-right');
		});
		eventsContent.css('height', selectedContentHeight+'px');
	}

	function updateOlderEvents(event) {
		event.parent('li').prevAll('li').children('a').addClass('older-event').end().end().nextAll('li').children('a').removeClass('older-event');
	}

	function getTranslateValue(timeline) {
		var timelineStyle = window.getComputedStyle(timeline.get(0), null),
			timelineTranslate = timelineStyle.getPropertyValue("-webkit-transform") ||
         		timelineStyle.getPropertyValue("-moz-transform") ||
         		timelineStyle.getPropertyValue("-ms-transform") ||
         		timelineStyle.getPropertyValue("-o-transform") ||
         		timelineStyle.getPropertyValue("transform");

        if( timelineTranslate.indexOf('(') >=0 ) {
        	var timelineTranslate = timelineTranslate.split('(')[1];
    		timelineTranslate = timelineTranslate.split(')')[0];
    		timelineTranslate = timelineTranslate.split(',');
    		var translateValue = timelineTranslate[4];
        } else {
        	var translateValue = 0;
        }

        return Number(translateValue);
	}

	function setTransformValue(element, property, value) {
		element.style["-webkit-transform"] = property+"("+value+")";
		element.style["-moz-transform"] = property+"("+value+")";
		element.style["-ms-transform"] = property+"("+value+")";
		element.style["-o-transform"] = property+"("+value+")";
		element.style["transform"] = property+"("+value+")";
	}

	//based on http://stackoverflow.com/questions/542938/how-do-i-get-the-number-of-days-between-two-dates-in-javascript
	function parseDate(events) {
		var dateArrays = [];
		events.each(function(){
			var dateComp = $(this).data('date').split('/'),
				newDate = new Date(dateComp[2], dateComp[1]-1, dateComp[0]);
			dateArrays.push(newDate);
		});
	    return dateArrays;
	}

	function parseDate2(events) {
		var dateArrays = [];
		events.each(function(){
			var singleDate = $(this),
				dateComp = singleDate.data('date').split('T');
			if( dateComp.length > 1 ) { //both DD/MM/YEAR and time are provided
				var dayComp = dateComp[0].split('/'),
					timeComp = dateComp[1].split(':');
			} else if( dateComp[0].indexOf(':') >=0 ) { //only time is provide
				var dayComp = ["2000", "0", "0"],
					timeComp = dateComp[0].split(':');
			} else { //only DD/MM/YEAR
				var dayComp = dateComp[0].split('/'),
					timeComp = ["0", "0"];
			}
			var	newDate = new Date(dayComp[2], dayComp[1]-1, dayComp[0], timeComp[0], timeComp[1]);
			dateArrays.push(newDate);
		});
	    return dateArrays;
	}

	function daydiff(first, second) {
	    return Math.round((second-first));
	}

	function minLapse(dates) {
		//determine the minimum distance among events
		var dateDistances = [];
		for (i = 1; i < dates.length; i++) { 
		    var distance = daydiff(dates[i-1], dates[i]);
		    dateDistances.push(distance);
		}
		return Math.min.apply(null, dateDistances);
	}

	/*
		How to tell if a DOM element is visible in the current viewport?
		http://stackoverflow.com/questions/123999/how-to-tell-if-a-dom-element-is-visible-in-the-current-viewport
	*/
	function elementInViewport(el) {
		var top = el.offsetTop;
		var left = el.offsetLeft;
		var width = el.offsetWidth;
		var height = el.offsetHeight;

		while(el.offsetParent) {
		    el = el.offsetParent;
		    top += el.offsetTop;
		    left += el.offsetLeft;
		}

		return (
		    top < (window.pageYOffset + window.innerHeight) &&
		    left < (window.pageXOffset + window.innerWidth) &&
		    (top + height) > window.pageYOffset &&
		    (left + width) > window.pageXOffset
		);
	}

	function checkMQ() {
		//check if mobile or desktop device
		return window.getComputedStyle(document.querySelector('.cd-horizontal-timeline'), '::before').getPropertyValue('content').replace(/'/g, "").replace(/"/g, "");
	}
});